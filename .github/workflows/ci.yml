name: CI

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  unit-tests:
    name: Lint, Build, Unit Tests (Node 20)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Lint
        run: npm run lint
        continue-on-error: true
      - name: Build
        run: npm run build
      - name: Unit tests with coverage (Jest)
        id: unit
        run: npm run test:cov -- --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
        env:
          CI: true
      - name: Enforce coverage >= 80% (statements)
        if: ${{ steps.unit.outcome == 'success' }}
        run: |
          node -e "const s=require('./coverage/coverage-summary.json').total.statements.pct;console.log('Statements:',s+'%');if(s<80){process.exit(1)}"

  e2e-tests:
    name: E2E (Supertest + Postgres)
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:14
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sports_bet_test
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: sports_bet_test
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 -U postgres && break; sleep 2; done
      - name: Run e2e tests
        run: npm run test:e2e

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: ${{ needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Trigger Render Deploy
        run: curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
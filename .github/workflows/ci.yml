name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit tests & coverage (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Node dependencies (for lint/build)
        run: npm ci

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 'latest'

      - name: Install Bun dependencies
        run: bun install

      - name: Lint (optional)
        run: npm run lint || true

      - name: Build (optional)
        run: npm run build || true

      - name: Run tests with coverage (Bun)
        id: run-tests
        run: bun run test:cov
        env:
          CI: true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Enforce coverage threshold (80% statements)
        if: ${{ steps.run-tests.outcome == 'success' }}
        run: |
          node -e "const fs=require('fs');const p='coverage/coverage-summary.json'; if(!fs.existsSync(p)){console.error('coverage summary not found'); process.exit(1);} const s=JSON.parse(fs.readFileSync(p)); const pct=s.total.statements.pct; console.log('Statements coverage:',pct+'%'); if(pct<80){console.error('Coverage threshold not met (80%)'); process.exit(1);}"

  e2e-tests:
    name: E2E tests (needs unit-tests)
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sports_bet_test
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: sports_bet_test
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NODE_ENV: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Ensure JWT_SECRET for e2e (use default if not provided)
        run: |
          if [ -z "${JWT_SECRET}" ]; then
            echo "JWT_SECRET not set â€” using default for CI"
            echo "JWT_SECRET=test_jwt_secret" >> $GITHUB_ENV
          else
            echo "JWT_SECRET is set"
          fi

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 2
          done

      - name: Run e2e tests (Bun)
        run: bun run test:e2e:cov

  deploy:
    name: Deploy (after unit tests)
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: ${{ needs.unit-tests.result == 'success' && github.ref == 'refs/heads/main' }}
    env:
      RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger Render Deploy if configured
        run: |
          if [ -n "${RENDER_DEPLOY_HOOK}" ]; then
            echo "Triggering Render webhook..."
            curl -fsSL -X POST "${RENDER_DEPLOY_HOOK}"
          else
            echo "No deploy hook configured. Set the secret RENDER_DEPLOY_HOOK to trigger a Render webhook."
          fi

